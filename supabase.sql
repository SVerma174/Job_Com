ceate or replace function requesting_user_id()
returns text
language sql stable
as $$
  select nullif(current_setting('request.jwt.claims', true)::jsonb->>'sub', '')::text;
$$;

CREATE TABLE public.applications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    job_id BIGINT NULL,
    candidate_id TEXT NULL DEFAULT requesting_user_id(),
    status public.status NULL,
    resume TEXT NULL,
    skills TEXT NULL,
    experience TEXT NULL,
    education TEXT NULL,
    name TEXT NULL,
    CONSTRAINT applications_pkey PRIMARY KEY (id),
    CONSTRAINT applications_job_id_fkey FOREIGN KEY (job_id) 
        REFERENCES jobs (id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE POLICY "Enable insert for authenticated users only" 
ON public.applications
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for all users" 
ON public.applications
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Policy with table joins" 
ON public.applications
AS PERMISSIVE FOR UPDATE
TO public
USING (
    (SELECT requesting_user_id() AS requesting_user_id) 
    IN (SELECT jobs.recruiter_id FROM jobs WHERE applications.job_id = jobs.id)
);

CREATE TABLE public.companies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    name TEXT NULL,
    logo_url TEXT NULL,
    CONSTRAINT companies_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

CREATE POLICY "Enable insert for authenticated users only" 
ON public.companies
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for auth users" 
ON public.companies
AS PERMISSIVE FOR SELECT
TO authenticated
USING (true);

CREATE TABLE public.jobs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    recruiter_id TEXT NULL DEFAULT requesting_user_id(),
    title TEXT NULL,
    company_id BIGINT NULL,
    description TEXT NULL,
    location TEXT NULL,
    requirements TEXT NULL,
    "isOpen" BOOLEAN NULL DEFAULT TRUE,
    CONSTRAINT jobs_pkey PRIMARY KEY (id),
    CONSTRAINT jobs_company_id_fkey FOREIGN KEY (company_id) 
        REFERENCES companies (id)
) TABLESPACE pg_default;

CREATE POLICY "Enable delete for users based on user_id" 
ON public.jobs
AS PERMISSIVE FOR DELETE
TO public
USING (requesting_user_id() = recruiter_id);

CREATE POLICY "Enable insert for authenticated users only" 
ON public.jobs
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for auth users" 
ON public.jobs
AS PERMISSIVE FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Enable update for users based on recruiter_id" 
ON public.jobs
AS PERMISSIVE FOR UPDATE
TO authenticated
USING (requesting_user_id() = recruiter_id);

CREATE TABLE public.saved_jobs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    user_id TEXT NULL DEFAULT requesting_user_id(),
    job_id BIGINT NULL,
    CONSTRAINT saved_jobs_pkey PRIMARY KEY (id),
    CONSTRAINT saved_jobs_job_id_fkey FOREIGN KEY (job_id) 
        REFERENCES jobs (id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE POLICY "Enable delete for users based on user_id" 
ON public.saved_jobs
AS PERMISSIVE FOR DELETE
TO public
USING (requesting_user_id() = user_id);

CREATE POLICY "Enable insert for authenticated users only" 
ON public.saved_jobs
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for current users" 
ON public.saved_jobs
AS PERMISSIVE FOR SELECT
TO authenticated
USING (requesting_user_id() = user_id);

CREATE POLICY "Auth users can upload mvsl4r_0" ON storage.objects FOR SELECT TO public USING (bucket_id = 'company-logo');
CREATE POLICY "Auth users can upload mvsl4r_0" ON storage.objects FOR INSERT TO public WITH CHECK(bucket_id = 'company-logo');

CREATE POLICY "Auth users can upload i5g8va_0" ON storage.objects FOR SELECT TO public USING (bucket_id = 'resumes');
CREATE POLICY "Auth users can upload i5g8va_1" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'resumes');